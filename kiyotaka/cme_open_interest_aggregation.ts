/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: cme_open_interest_aggregation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./timestamp/timestamp";
import * as pb_1 from "google-protobuf";
export class CmeOpenInterestAggregation extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]];
    constructor(data?: any[] | ({
        timestamp?: dependency_1.Timestamp;
    } & (({
        open?: number;
    }) | ({
        high?: number;
    }) | ({
        low?: number;
    }) | ({
        close?: number;
    }) | ({
        valueOpen?: number;
    }) | ({
        valueHigh?: number;
    }) | ({
        valueLow?: number;
    }) | ({
        valueClose?: number;
    }) | ({
        priceOpen?: number;
    }) | ({
        priceHigh?: number;
    }) | ({
        priceLow?: number;
    }) | ({
        priceClose?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("open" in data && data.open != undefined) {
                this.open = data.open;
            }
            if ("high" in data && data.high != undefined) {
                this.high = data.high;
            }
            if ("low" in data && data.low != undefined) {
                this.low = data.low;
            }
            if ("close" in data && data.close != undefined) {
                this.close = data.close;
            }
            if ("valueOpen" in data && data.valueOpen != undefined) {
                this.valueOpen = data.valueOpen;
            }
            if ("valueHigh" in data && data.valueHigh != undefined) {
                this.valueHigh = data.valueHigh;
            }
            if ("valueLow" in data && data.valueLow != undefined) {
                this.valueLow = data.valueLow;
            }
            if ("valueClose" in data && data.valueClose != undefined) {
                this.valueClose = data.valueClose;
            }
            if ("priceOpen" in data && data.priceOpen != undefined) {
                this.priceOpen = data.priceOpen;
            }
            if ("priceHigh" in data && data.priceHigh != undefined) {
                this.priceHigh = data.priceHigh;
            }
            if ("priceLow" in data && data.priceLow != undefined) {
                this.priceLow = data.priceLow;
            }
            if ("priceClose" in data && data.priceClose != undefined) {
                this.priceClose = data.priceClose;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get open() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set open(value: number) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_open() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get high() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set high(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_high() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get low() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set low(value: number) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_low() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get close() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set close(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
    }
    get has_close() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get valueOpen() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set valueOpen(value: number) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
    }
    get has_valueOpen() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get valueHigh() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set valueHigh(value: number) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[5], value);
    }
    get has_valueHigh() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get valueLow() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set valueLow(value: number) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[6], value);
    }
    get has_valueLow() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get valueClose() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set valueClose(value: number) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[7], value);
    }
    get has_valueClose() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get priceOpen() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set priceOpen(value: number) {
        pb_1.Message.setOneofField(this, 9, this.#one_of_decls[8], value);
    }
    get has_priceOpen() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get priceHigh() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set priceHigh(value: number) {
        pb_1.Message.setOneofField(this, 10, this.#one_of_decls[9], value);
    }
    get has_priceHigh() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get priceLow() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set priceLow(value: number) {
        pb_1.Message.setOneofField(this, 11, this.#one_of_decls[10], value);
    }
    get has_priceLow() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get priceClose() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set priceClose(value: number) {
        pb_1.Message.setOneofField(this, 12, this.#one_of_decls[11], value);
    }
    get has_priceClose() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get timestamp() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 13) as dependency_1.Timestamp;
    }
    set timestamp(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_timestamp() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get _open() {
        const cases: {
            [index: number]: "none" | "open";
        } = {
            0: "none",
            1: "open"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _high() {
        const cases: {
            [index: number]: "none" | "high";
        } = {
            0: "none",
            2: "high"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _low() {
        const cases: {
            [index: number]: "none" | "low";
        } = {
            0: "none",
            3: "low"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _close() {
        const cases: {
            [index: number]: "none" | "close";
        } = {
            0: "none",
            4: "close"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _valueOpen() {
        const cases: {
            [index: number]: "none" | "valueOpen";
        } = {
            0: "none",
            5: "valueOpen"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _valueHigh() {
        const cases: {
            [index: number]: "none" | "valueHigh";
        } = {
            0: "none",
            6: "valueHigh"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    get _valueLow() {
        const cases: {
            [index: number]: "none" | "valueLow";
        } = {
            0: "none",
            7: "valueLow"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get _valueClose() {
        const cases: {
            [index: number]: "none" | "valueClose";
        } = {
            0: "none",
            8: "valueClose"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    get _priceOpen() {
        const cases: {
            [index: number]: "none" | "priceOpen";
        } = {
            0: "none",
            9: "priceOpen"
        };
        return cases[pb_1.Message.computeOneofCase(this, [9])];
    }
    get _priceHigh() {
        const cases: {
            [index: number]: "none" | "priceHigh";
        } = {
            0: "none",
            10: "priceHigh"
        };
        return cases[pb_1.Message.computeOneofCase(this, [10])];
    }
    get _priceLow() {
        const cases: {
            [index: number]: "none" | "priceLow";
        } = {
            0: "none",
            11: "priceLow"
        };
        return cases[pb_1.Message.computeOneofCase(this, [11])];
    }
    get _priceClose() {
        const cases: {
            [index: number]: "none" | "priceClose";
        } = {
            0: "none",
            12: "priceClose"
        };
        return cases[pb_1.Message.computeOneofCase(this, [12])];
    }
    static fromObject(data: {
        open?: number;
        high?: number;
        low?: number;
        close?: number;
        valueOpen?: number;
        valueHigh?: number;
        valueLow?: number;
        valueClose?: number;
        priceOpen?: number;
        priceHigh?: number;
        priceLow?: number;
        priceClose?: number;
        timestamp?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): CmeOpenInterestAggregation {
        const message = new CmeOpenInterestAggregation({});
        if (data.open != null) {
            message.open = data.open;
        }
        if (data.high != null) {
            message.high = data.high;
        }
        if (data.low != null) {
            message.low = data.low;
        }
        if (data.close != null) {
            message.close = data.close;
        }
        if (data.valueOpen != null) {
            message.valueOpen = data.valueOpen;
        }
        if (data.valueHigh != null) {
            message.valueHigh = data.valueHigh;
        }
        if (data.valueLow != null) {
            message.valueLow = data.valueLow;
        }
        if (data.valueClose != null) {
            message.valueClose = data.valueClose;
        }
        if (data.priceOpen != null) {
            message.priceOpen = data.priceOpen;
        }
        if (data.priceHigh != null) {
            message.priceHigh = data.priceHigh;
        }
        if (data.priceLow != null) {
            message.priceLow = data.priceLow;
        }
        if (data.priceClose != null) {
            message.priceClose = data.priceClose;
        }
        if (data.timestamp != null) {
            message.timestamp = dependency_1.Timestamp.fromObject(data.timestamp);
        }
        return message;
    }
    toObject() {
        const data: {
            open?: number;
            high?: number;
            low?: number;
            close?: number;
            valueOpen?: number;
            valueHigh?: number;
            valueLow?: number;
            valueClose?: number;
            priceOpen?: number;
            priceHigh?: number;
            priceLow?: number;
            priceClose?: number;
            timestamp?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.open != null) {
            data.open = this.open;
        }
        if (this.high != null) {
            data.high = this.high;
        }
        if (this.low != null) {
            data.low = this.low;
        }
        if (this.close != null) {
            data.close = this.close;
        }
        if (this.valueOpen != null) {
            data.valueOpen = this.valueOpen;
        }
        if (this.valueHigh != null) {
            data.valueHigh = this.valueHigh;
        }
        if (this.valueLow != null) {
            data.valueLow = this.valueLow;
        }
        if (this.valueClose != null) {
            data.valueClose = this.valueClose;
        }
        if (this.priceOpen != null) {
            data.priceOpen = this.priceOpen;
        }
        if (this.priceHigh != null) {
            data.priceHigh = this.priceHigh;
        }
        if (this.priceLow != null) {
            data.priceLow = this.priceLow;
        }
        if (this.priceClose != null) {
            data.priceClose = this.priceClose;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_open)
            writer.writeDouble(1, this.open);
        if (this.has_high)
            writer.writeDouble(2, this.high);
        if (this.has_low)
            writer.writeDouble(3, this.low);
        if (this.has_close)
            writer.writeDouble(4, this.close);
        if (this.has_valueOpen)
            writer.writeDouble(5, this.valueOpen);
        if (this.has_valueHigh)
            writer.writeDouble(6, this.valueHigh);
        if (this.has_valueLow)
            writer.writeDouble(7, this.valueLow);
        if (this.has_valueClose)
            writer.writeDouble(8, this.valueClose);
        if (this.has_priceOpen)
            writer.writeDouble(9, this.priceOpen);
        if (this.has_priceHigh)
            writer.writeDouble(10, this.priceHigh);
        if (this.has_priceLow)
            writer.writeDouble(11, this.priceLow);
        if (this.has_priceClose)
            writer.writeDouble(12, this.priceClose);
        if (this.has_timestamp)
            writer.writeMessage(13, this.timestamp, () => this.timestamp.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CmeOpenInterestAggregation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CmeOpenInterestAggregation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.open = reader.readDouble();
                    break;
                case 2:
                    message.high = reader.readDouble();
                    break;
                case 3:
                    message.low = reader.readDouble();
                    break;
                case 4:
                    message.close = reader.readDouble();
                    break;
                case 5:
                    message.valueOpen = reader.readDouble();
                    break;
                case 6:
                    message.valueHigh = reader.readDouble();
                    break;
                case 7:
                    message.valueLow = reader.readDouble();
                    break;
                case 8:
                    message.valueClose = reader.readDouble();
                    break;
                case 9:
                    message.priceOpen = reader.readDouble();
                    break;
                case 10:
                    message.priceHigh = reader.readDouble();
                    break;
                case 11:
                    message.priceLow = reader.readDouble();
                    break;
                case 12:
                    message.priceClose = reader.readDouble();
                    break;
                case 13:
                    reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CmeOpenInterestAggregation {
        return CmeOpenInterestAggregation.deserialize(bytes);
    }
}
