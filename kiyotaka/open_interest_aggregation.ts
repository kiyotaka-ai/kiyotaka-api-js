/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: open_interest_aggregation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./timestamp/timestamp";
import * as pb_1 from "google-protobuf";
export class OpenInterestAggregation extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4]];
    constructor(data?: any[] | ({
        timestamp?: dependency_1.Timestamp;
    } & (({
        open?: number;
    }) | ({
        high?: number;
    }) | ({
        low?: number;
    }) | ({
        close?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("open" in data && data.open != undefined) {
                this.open = data.open;
            }
            if ("high" in data && data.high != undefined) {
                this.high = data.high;
            }
            if ("low" in data && data.low != undefined) {
                this.low = data.low;
            }
            if ("close" in data && data.close != undefined) {
                this.close = data.close;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get open() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set open(value: number) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_open() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get high() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set high(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_high() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get low() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set low(value: number) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_low() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get close() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set close(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
    }
    get has_close() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get timestamp() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 9) as dependency_1.Timestamp;
    }
    set timestamp(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_timestamp() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get _open() {
        const cases: {
            [index: number]: "none" | "open";
        } = {
            0: "none",
            1: "open"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _high() {
        const cases: {
            [index: number]: "none" | "high";
        } = {
            0: "none",
            2: "high"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _low() {
        const cases: {
            [index: number]: "none" | "low";
        } = {
            0: "none",
            3: "low"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _close() {
        const cases: {
            [index: number]: "none" | "close";
        } = {
            0: "none",
            4: "close"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        open?: number;
        high?: number;
        low?: number;
        close?: number;
        timestamp?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): OpenInterestAggregation {
        const message = new OpenInterestAggregation({});
        if (data.open != null) {
            message.open = data.open;
        }
        if (data.high != null) {
            message.high = data.high;
        }
        if (data.low != null) {
            message.low = data.low;
        }
        if (data.close != null) {
            message.close = data.close;
        }
        if (data.timestamp != null) {
            message.timestamp = dependency_1.Timestamp.fromObject(data.timestamp);
        }
        return message;
    }
    toObject() {
        const data: {
            open?: number;
            high?: number;
            low?: number;
            close?: number;
            timestamp?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.open != null) {
            data.open = this.open;
        }
        if (this.high != null) {
            data.high = this.high;
        }
        if (this.low != null) {
            data.low = this.low;
        }
        if (this.close != null) {
            data.close = this.close;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_open)
            writer.writeDouble(1, this.open);
        if (this.has_high)
            writer.writeDouble(2, this.high);
        if (this.has_low)
            writer.writeDouble(3, this.low);
        if (this.has_close)
            writer.writeDouble(4, this.close);
        if (this.has_timestamp)
            writer.writeMessage(9, this.timestamp, () => this.timestamp.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OpenInterestAggregation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OpenInterestAggregation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.open = reader.readDouble();
                    break;
                case 2:
                    message.high = reader.readDouble();
                    break;
                case 3:
                    message.low = reader.readDouble();
                    break;
                case 4:
                    message.close = reader.readDouble();
                    break;
                case 9:
                    reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OpenInterestAggregation {
        return OpenInterestAggregation.deserialize(bytes);
    }
}
