/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: hyperliquid_liquidation_aggregation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./timestamp/timestamp";
import * as pb_1 from "google-protobuf";
export class HyperliquidLiquidationAggregation extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        timestamp?: dependency_1.Timestamp;
        coin?: string;
        levels?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("coin" in data && data.coin != undefined) {
                this.coin = data.coin;
            }
            if ("levels" in data && data.levels != undefined) {
                this.levels = data.levels;
            }
        }
    }
    get timestamp() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 1) as dependency_1.Timestamp;
    }
    set timestamp(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_timestamp() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get coin() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set coin(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get levels() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set levels(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        timestamp?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        coin?: string;
        levels?: number[];
    }): HyperliquidLiquidationAggregation {
        const message = new HyperliquidLiquidationAggregation({});
        if (data.timestamp != null) {
            message.timestamp = dependency_1.Timestamp.fromObject(data.timestamp);
        }
        if (data.coin != null) {
            message.coin = data.coin;
        }
        if (data.levels != null) {
            message.levels = data.levels;
        }
        return message;
    }
    toObject() {
        const data: {
            timestamp?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            coin?: string;
            levels?: number[];
        } = {};
        if (this.timestamp != null) {
            data.timestamp = this.timestamp.toObject();
        }
        if (this.coin != null) {
            data.coin = this.coin;
        }
        if (this.levels != null) {
            data.levels = this.levels;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_timestamp)
            writer.writeMessage(1, this.timestamp, () => this.timestamp.serialize(writer));
        if (this.coin.length)
            writer.writeString(2, this.coin);
        if (this.levels.length)
            writer.writePackedDouble(5, this.levels);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HyperliquidLiquidationAggregation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HyperliquidLiquidationAggregation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 2:
                    message.coin = reader.readString();
                    break;
                case 5:
                    message.levels = reader.readPackedDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HyperliquidLiquidationAggregation {
        return HyperliquidLiquidationAggregation.deserialize(bytes);
    }
}
