/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: funding_rate_aggregation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./timestamp/timestamp";
import * as pb_1 from "google-protobuf";
export class FundingRateAggregation extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4], [5], [6], [7], [8]];
    constructor(data?: any[] | ({
        timestamp?: dependency_1.Timestamp;
    } & (({
        rateOpen?: number;
    }) | ({
        rateHigh?: number;
    }) | ({
        rateLow?: number;
    }) | ({
        rateClose?: number;
    }) | ({
        predictedOpen?: number;
    }) | ({
        predictedHigh?: number;
    }) | ({
        predictedLow?: number;
    }) | ({
        predictedClose?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("rateOpen" in data && data.rateOpen != undefined) {
                this.rateOpen = data.rateOpen;
            }
            if ("rateHigh" in data && data.rateHigh != undefined) {
                this.rateHigh = data.rateHigh;
            }
            if ("rateLow" in data && data.rateLow != undefined) {
                this.rateLow = data.rateLow;
            }
            if ("rateClose" in data && data.rateClose != undefined) {
                this.rateClose = data.rateClose;
            }
            if ("predictedOpen" in data && data.predictedOpen != undefined) {
                this.predictedOpen = data.predictedOpen;
            }
            if ("predictedHigh" in data && data.predictedHigh != undefined) {
                this.predictedHigh = data.predictedHigh;
            }
            if ("predictedLow" in data && data.predictedLow != undefined) {
                this.predictedLow = data.predictedLow;
            }
            if ("predictedClose" in data && data.predictedClose != undefined) {
                this.predictedClose = data.predictedClose;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get rateOpen() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set rateOpen(value: number) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_rateOpen() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get rateHigh() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set rateHigh(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_rateHigh() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get rateLow() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set rateLow(value: number) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_rateLow() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get rateClose() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set rateClose(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
    }
    get has_rateClose() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get predictedOpen() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set predictedOpen(value: number) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
    }
    get has_predictedOpen() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get predictedHigh() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set predictedHigh(value: number) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[5], value);
    }
    get has_predictedHigh() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get predictedLow() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set predictedLow(value: number) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[6], value);
    }
    get has_predictedLow() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get predictedClose() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set predictedClose(value: number) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[7], value);
    }
    get has_predictedClose() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get timestamp() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 9) as dependency_1.Timestamp;
    }
    set timestamp(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_timestamp() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get _rateOpen() {
        const cases: {
            [index: number]: "none" | "rateOpen";
        } = {
            0: "none",
            1: "rateOpen"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _rateHigh() {
        const cases: {
            [index: number]: "none" | "rateHigh";
        } = {
            0: "none",
            2: "rateHigh"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _rateLow() {
        const cases: {
            [index: number]: "none" | "rateLow";
        } = {
            0: "none",
            3: "rateLow"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _rateClose() {
        const cases: {
            [index: number]: "none" | "rateClose";
        } = {
            0: "none",
            4: "rateClose"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _predictedOpen() {
        const cases: {
            [index: number]: "none" | "predictedOpen";
        } = {
            0: "none",
            5: "predictedOpen"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _predictedHigh() {
        const cases: {
            [index: number]: "none" | "predictedHigh";
        } = {
            0: "none",
            6: "predictedHigh"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    get _predictedLow() {
        const cases: {
            [index: number]: "none" | "predictedLow";
        } = {
            0: "none",
            7: "predictedLow"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get _predictedClose() {
        const cases: {
            [index: number]: "none" | "predictedClose";
        } = {
            0: "none",
            8: "predictedClose"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    static fromObject(data: {
        rateOpen?: number;
        rateHigh?: number;
        rateLow?: number;
        rateClose?: number;
        predictedOpen?: number;
        predictedHigh?: number;
        predictedLow?: number;
        predictedClose?: number;
        timestamp?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): FundingRateAggregation {
        const message = new FundingRateAggregation({});
        if (data.rateOpen != null) {
            message.rateOpen = data.rateOpen;
        }
        if (data.rateHigh != null) {
            message.rateHigh = data.rateHigh;
        }
        if (data.rateLow != null) {
            message.rateLow = data.rateLow;
        }
        if (data.rateClose != null) {
            message.rateClose = data.rateClose;
        }
        if (data.predictedOpen != null) {
            message.predictedOpen = data.predictedOpen;
        }
        if (data.predictedHigh != null) {
            message.predictedHigh = data.predictedHigh;
        }
        if (data.predictedLow != null) {
            message.predictedLow = data.predictedLow;
        }
        if (data.predictedClose != null) {
            message.predictedClose = data.predictedClose;
        }
        if (data.timestamp != null) {
            message.timestamp = dependency_1.Timestamp.fromObject(data.timestamp);
        }
        return message;
    }
    toObject() {
        const data: {
            rateOpen?: number;
            rateHigh?: number;
            rateLow?: number;
            rateClose?: number;
            predictedOpen?: number;
            predictedHigh?: number;
            predictedLow?: number;
            predictedClose?: number;
            timestamp?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.rateOpen != null) {
            data.rateOpen = this.rateOpen;
        }
        if (this.rateHigh != null) {
            data.rateHigh = this.rateHigh;
        }
        if (this.rateLow != null) {
            data.rateLow = this.rateLow;
        }
        if (this.rateClose != null) {
            data.rateClose = this.rateClose;
        }
        if (this.predictedOpen != null) {
            data.predictedOpen = this.predictedOpen;
        }
        if (this.predictedHigh != null) {
            data.predictedHigh = this.predictedHigh;
        }
        if (this.predictedLow != null) {
            data.predictedLow = this.predictedLow;
        }
        if (this.predictedClose != null) {
            data.predictedClose = this.predictedClose;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_rateOpen)
            writer.writeDouble(1, this.rateOpen);
        if (this.has_rateHigh)
            writer.writeDouble(2, this.rateHigh);
        if (this.has_rateLow)
            writer.writeDouble(3, this.rateLow);
        if (this.has_rateClose)
            writer.writeDouble(4, this.rateClose);
        if (this.has_predictedOpen)
            writer.writeDouble(5, this.predictedOpen);
        if (this.has_predictedHigh)
            writer.writeDouble(6, this.predictedHigh);
        if (this.has_predictedLow)
            writer.writeDouble(7, this.predictedLow);
        if (this.has_predictedClose)
            writer.writeDouble(8, this.predictedClose);
        if (this.has_timestamp)
            writer.writeMessage(9, this.timestamp, () => this.timestamp.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FundingRateAggregation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FundingRateAggregation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.rateOpen = reader.readDouble();
                    break;
                case 2:
                    message.rateHigh = reader.readDouble();
                    break;
                case 3:
                    message.rateLow = reader.readDouble();
                    break;
                case 4:
                    message.rateClose = reader.readDouble();
                    break;
                case 5:
                    message.predictedOpen = reader.readDouble();
                    break;
                case 6:
                    message.predictedHigh = reader.readDouble();
                    break;
                case 7:
                    message.predictedLow = reader.readDouble();
                    break;
                case 8:
                    message.predictedClose = reader.readDouble();
                    break;
                case 9:
                    reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FundingRateAggregation {
        return FundingRateAggregation.deserialize(bytes);
    }
}
